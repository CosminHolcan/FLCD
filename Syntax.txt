Syntactic rules:
    program = (stmt ";"| whileStmt | ifStmt ) {stmt ";"| whileStmt | ifStmt }
    stmt = declStmt | assignStmt | readStmt | writeStmt
    assignStmt = id "=" (int | char | string | dual)
    declStmt = simpleDeclStmt | componentDeclStmt 
    simpleDeclStmt = ("declare" type id) | ("declare" type id {, id} )
    componentDeclStmt = "component" id "{" simpleDeclStmt ";" {simpleDeclStmt ;} "}"
    readStmt = "readFromInput" "(" id ")"
    writeStmt = "writeToOutput" "( id ")"
    type = "int" | char" | "string" | "dual"
    relationalOp = "<" | ">" | "==" | ">=" | "<=" | "!="
    whileStmt = "whileCondition" "(" checkStmt ")" "do" "{" program "}"
    ifStmt = "ifTrue" "(" checkStmt ")" "{" program "}" [elseStmt]
    elseStmt = "elseDo" "{" program "}"
    checkStmt = expression relationalOp expression
    expression = term | expression ("+" | "-" ) term
    term = factor | term ("*" | "/" | "%") factor
    factor = "(" expression ")" | id | int